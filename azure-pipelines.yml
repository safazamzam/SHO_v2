trigger:trigger:# Azure DevOps CI/CD Pipeline for Shift Handover App

- main

- main# Deploys to Google Cloud VM using Azure Container Registry (ACR)

variables:

- group: ACR-Variables



stages:variables:trigger:

- stage: Build

  displayName: 'Build Application'- group: ACR-Variables  branches:

  jobs:

  - job: BuildJob    include:

    displayName: 'Build and Test'

    pool:stages:      - main

      vmImage: 'ubuntu-latest'

    - stage: Build  paths:

    steps:

    - checkout: self  displayName: 'Build Application'    exclude:

    

    - task: UsePythonVersion@0  jobs:      - README.md

      inputs:

        versionSpec: '3.9'  - job: BuildJob      - docs/*

      displayName: 'Use Python 3.9'

        displayName: 'Build and Test'      - "*.md"

    - script: |

        python -m pip install --upgrade pip    pool:

        pip install -r requirements.txt

      displayName: 'Install dependencies'      vmImage: 'ubuntu-latest'variables:



- stage: DockerBuild    - group: ACR-Variables       # Azure Container Registry and deployment variables

  displayName: 'Build and Push Docker Image'

  dependsOn: Build    steps:- name: imageTag

  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

  jobs:    - checkout: self  value: '$(Build.BuildId)'

  - job: DockerBuild

    displayName: 'Build and Push to ACR'    - name: fullImageName

    pool:

      vmImage: 'ubuntu-latest'    - task: UsePythonVersion@0  value: '$(acrLoginServer)/$(dockerRepository):$(imageTag)'

    

    steps:      inputs:

    - checkout: self

            versionSpec: '3.9'stages:

    - task: AzureCLI@2

      displayName: 'Login to Azure Container Registry'      displayName: 'Use Python 3.9'- stage: Build

      inputs:

        azureSubscription: 'ACRConnection'      displayName: 'Build and Test'

        scriptType: 'bash'

        scriptLocation: 'inlineScript'    - script: |  jobs:

        inlineScript: |

          az acr login --name $(acrName)        python -m pip install --upgrade pip  - job: BuildJob

    

    - script: |        pip install -r requirements.txt    displayName: 'Build Application'

        export imageTag="$(Build.BuildNumber)"

        export fullImageName="$(acrLoginServer)/$(dockerRepository):$imageTag"      displayName: 'Install dependencies'    pool:

        

        docker build -t $(dockerRepository):$imageTag .      vmImage: 'ubuntu-latest'

        docker tag $(dockerRepository):$imageTag $fullImageName

        docker push $fullImageName- stage: DockerBuild    

        

        echo "##vso[task.setvariable variable=imageTag;isOutput=true]$imageTag"  displayName: 'Build and Push Docker Image'    steps:

        echo "##vso[task.setvariable variable=fullImageName;isOutput=true]$fullImageName"

      name: dockerBuild  dependsOn: Build    - checkout: self

      displayName: 'Build and Push Docker Image'

  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))      fetchDepth: 1

- stage: DeployStage

  displayName: 'Deploy to GCP VM'  jobs:      displayName: 'Checkout Source Code'

  dependsOn: DockerBuild

  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))  - job: DockerBuild    

  jobs:

  - job: VMDeployment    displayName: 'Build and Push to ACR'    - task: UsePythonVersion@0

    displayName: 'VM Deployment Job'

    pool:    pool:      inputs:

      vmImage: 'ubuntu-latest'

    variables:      vmImage: 'ubuntu-latest'        versionSpec: '$(pythonVersion)'

      imageTag: $[ stageDependencies.DockerBuild.DockerBuild.outputs['dockerBuild.imageTag'] ]

      fullImageName: $[ stageDependencies.DockerBuild.DockerBuild.outputs['dockerBuild.fullImageName'] ]            addToPath: true

    

    steps:    steps:      displayName: 'Setup Python $(pythonVersion)'

    - checkout: none

            - checkout: self    

    - script: |

        echo "Starting deployment to GCP VM..."        - script: |

        

        mkdir -p ~/.ssh    - task: AzureCLI@2        python -m pip install --upgrade pip

        echo "$(SSH_PRIVATE_KEY)" > ~/.ssh/id_rsa

        chmod 600 ~/.ssh/id_rsa      displayName: 'Login to Azure Container Registry'        pip install -r requirements.txt

        

        ssh -o StrictHostKeyChecking=no shifthandoversajid@35.200.202.18 << 'EOF'      inputs:      displayName: 'Install Dependencies'

        sudo docker stop shift-handover-app || true

        sudo docker rm shift-handover-app || true        azureSubscription: 'ACRConnection'    

        sudo docker pull $(fullImageName)

        sudo docker run -d --name shift-handover-app --restart unless-stopped -p 80:5000 $(fullImageName)        scriptType: 'bash'    - script: |

EOF

      displayName: 'Deploy Application'        scriptLocation: 'inlineScript'        echo "üîç Validating application..."

        inlineScript: |        python -c "

          az acr login --name $(acrName)        try:

                import app

    - script: |            print('‚úÖ Application imports successfully')

        export imageTag="$(Build.BuildNumber)"            print('‚úÖ Flask app configuration valid')

        export fullImageName="$(acrLoginServer)/$(dockerRepository):$imageTag"        except Exception as e:

                    print(f'‚ùå Application validation failed: {e}')

        docker build -t $(dockerRepository):$imageTag .            exit(1)

        docker tag $(dockerRepository):$imageTag $fullImageName        "

        docker push $fullImageName        echo "‚úÖ Build validation completed"

              displayName: 'Validate Application'

        echo "##vso[task.setvariable variable=imageTag;isOutput=true]$imageTag"

        echo "##vso[task.setvariable variable=fullImageName;isOutput=true]$fullImageName"- stage: DockerBuild

      name: dockerBuild  displayName: 'Build Docker Image'

      displayName: 'Build and Push Docker Image'  dependsOn: Build

  condition: succeeded()

- stage: DeployStage  jobs:

  displayName: 'Deploy to GCP VM'  - job: DockerBuildJob

  dependsOn: DockerBuild    displayName: 'Build and Push to Azure Container Registry'

  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))    pool:

  jobs:      vmImage: 'ubuntu-latest'

  - job: VMDeployment    

    displayName: 'VM Deployment Job'    steps:

    pool:    - checkout: self

      vmImage: 'ubuntu-latest'      displayName: 'Checkout Source Code'

    variables:    

      imageTag: $[ stageDependencies.DockerBuild.DockerBuild.outputs['dockerBuild.imageTag'] ]    - task: AzureCLI@2

      fullImageName: $[ stageDependencies.DockerBuild.DockerBuild.outputs['dockerBuild.fullImageName'] ]      displayName: 'Login to Azure Container Registry'

          inputs:

    steps:        azureSubscription: 'ACRConnection'  # Service connection for ACR

    - checkout: none        scriptType: 'bash'

                scriptLocation: 'inlineScript'

    - script: |        inlineScript: |

        echo "Starting deployment to GCP VM..."          echo "üîê Logging into Azure Container Registry..."

                  az acr login --name $(acrName)

        mkdir -p ~/.ssh          echo "‚úÖ Successfully logged into $(acrLoginServer)"

        echo "$(SSH_PRIVATE_KEY)" > ~/.ssh/id_rsa    

        chmod 600 ~/.ssh/id_rsa    - task: Docker@2

              displayName: 'Build Docker Image'

        ssh -o StrictHostKeyChecking=no shifthandoversajid@35.200.202.18 << 'EOF'      inputs:

        sudo docker stop shift-handover-app || true        containerRegistry: 'ACRConnection'

        sudo docker rm shift-handover-app || true        repository: '$(dockerRepository)'

        sudo docker pull $(fullImageName)        command: 'build'

        sudo docker run -d --name shift-handover-app --restart unless-stopped -p 80:5000 $(fullImageName)        Dockerfile: 'Dockerfile'

EOF        tags: |

      displayName: 'Deploy Application'          $(imageTag)
          latest
        arguments: '--no-cache --pull'
    
    - task: Docker@2
      displayName: 'Push Docker Image to ACR'
      inputs:
        containerRegistry: 'ACRConnection'
        repository: '$(dockerRepository)'
        command: 'push'
        tags: |
          $(imageTag)
          latest
    
    - script: |
        echo "üê≥ Docker image built and pushed to Azure Container Registry:"
        echo "Registry: $(acrLoginServer)"
        echo "Repository: $(dockerRepository)"
        echo "Tags: $(imageTag), latest"
        echo "Full image name: $(fullImageName)"
      displayName: 'Docker Build Summary'

- stage: Deploy
  displayName: 'Deploy to GCP VM'
  dependsOn: DockerBuild
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - job: DeployToGCP
    displayName: 'Deploy to Google Cloud VM'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - checkout: none
        
    - script: |
        echo "üöÄ Starting deployment to GCP VM..."
        
        # Setup SSH key
        mkdir -p ~/.ssh
        echo "$(SSH_PRIVATE_KEY)" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "35.200.202.18 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC7ma3Vf8OlWzJGvEzj" >> ~/.ssh/known_hosts
        
        # Login to Azure Container Registry from GCP VM via SSH
        echo "üîê Logging into Azure Container Registry on remote VM..."
        ssh -o StrictHostKeyChecking=no shifthandoversajid@35.200.202.18 << 'EOF'
        az acr login --name $(acrName) || {
          echo "Installing Azure CLI on VM..."
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az acr login --name $(acrName)
        }
        
        # Create application directories
        sudo mkdir -p /opt/shift-handover-data
        sudo mkdir -p /opt/shift-handover-uploads
        sudo chown -R $USER:$USER /opt/shift-handover-*
        
        # Stop and remove existing container
        echo "üõë Stopping existing container..."
        sudo docker stop shift-handover-app || true
        sudo docker rm shift-handover-app || true
        
        # Pull latest image from ACR
        echo "üì• Pulling latest Docker image from Azure Container Registry..."
        sudo docker pull $(fullImageName)
        
        # Run new container
        echo "üöÄ Starting new container..."
        sudo docker run -d \
          --name shift-handover-app \
          --restart unless-stopped \
          -p 80:5000 \
          -p 443:5000 \
          -e FLASK_ENV=production \
          -e SECRET_KEY="$(SECRET_KEY)" \
          -e DATABASE_URI="$(DATABASE_URI)" \
          -e SMTP_SERVER=smtp.gmail.com \
          -e SMTP_PORT=587 \
          -e SMTP_USERNAME="$(SMTP_USERNAME)" \
          -e SMTP_PASSWORD="$(SMTP_PASSWORD)" \
          -e TEAM_EMAIL="$(SMTP_USERNAME)" \
          -e SERVICENOW_INSTANCE="$(SERVICENOW_INSTANCE)" \
          -e SERVICENOW_USERNAME="$(SERVICENOW_USERNAME)" \
          -e SERVICENOW_PASSWORD="$(SERVICENOW_PASSWORD)" \
          -e SERVICENOW_ENABLED=true \
          -e SSO_ENCRYPTION_KEY="$(SSO_ENCRYPTION_KEY)" \
          -e GOOGLE_OAUTH_CLIENT_ID="$(GOOGLE_OAUTH_CLIENT_ID)" \
          -e GOOGLE_OAUTH_CLIENT_SECRET="$(GOOGLE_OAUTH_CLIENT_SECRET)" \
          -v /opt/shift-handover-data:/app/instance \
          -v /opt/shift-handover-uploads:/app/uploads \
          $(fullImageName)
        
        echo "‚úÖ Container started successfully"
        
        # Wait for application to initialize
        echo "‚è≥ Waiting for application to initialize..."
        sleep 15
        
        # Check container status
        if sudo docker ps | grep -q shift-handover-app; then
          echo "‚úÖ Container is running"
          sudo docker ps | grep shift-handover-app
        else
          echo "‚ùå Container failed to start"
          sudo docker logs shift-handover-app --tail 50
          exit 1
        fi
EOF
      displayName: 'Deploy Application to GCP VM'
          
    - script: |
        echo "üîç Performing health checks..."
        
        # Health check via SSH
        ssh -o StrictHostKeyChecking=no shifthandoversajid@35.200.202.18 << 'EOF'
        ssh -o StrictHostKeyChecking=no shifthandoversajid@35.200.202.18 << 'EOF'
        echo "üîç Performing health checks..."
        
        # Wait a bit more for app to be fully ready
        sleep 10
        
        # Check application response
        if curl -f --max-time 30 http://localhost/; then
          echo "‚úÖ Application is responding on HTTP"
        else
          echo "‚ö†Ô∏è HTTP health check failed, checking container logs..."
          sudo docker logs shift-handover-app --tail 100
        fi
        
        # Check if SSO endpoints are accessible
        if curl -f --max-time 10 http://localhost/login; then
          echo "‚úÖ Login page is accessible"
        else
          echo "‚ö†Ô∏è Login page check failed"
        fi
        
        # Display container information
        echo "üìä Container status:"
        sudo docker ps --filter name=shift-handover-app --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        
        # Display resource usage
        echo "üíæ Resource usage:"
        sudo docker stats shift-handover-app --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"
        
        echo "üéâ Deployment verification completed!"
EOF
      displayName: 'Health Check and Verification'

- stage: Cleanup
  displayName: 'Post-Deployment Cleanup'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: CleanupJob
    displayName: 'Cleanup Old Images'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: SSH@0
      displayName: 'Cleanup Old Docker Images'
      inputs:
        sshEndpoint: 'GCPVMConnection'
        runOptions: 'commands'
        commands: |
          echo "üßπ Cleaning up old Docker images..."
          
          # Remove dangling images
          sudo docker image prune -f
          
          # Remove old versions from ACR (keep last 3)
          sudo docker images $(acrLoginServer)/$(dockerRepository) --format "{{.Tag}}" | \
            grep -v "latest" | \
            tail -n +4 | \
            xargs -r -I {} sudo docker rmi $(acrLoginServer)/$(dockerRepository):{} || true
          
          # Clean up system
          sudo docker system prune -f
          
          echo "‚úÖ Cleanup completed"
          echo "üìã Remaining images:"
          sudo docker images $(acrLoginServer)/$(dockerRepository)