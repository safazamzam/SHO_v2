# Production HTTPS Docker Compose with Nginx + Let's Encrypt
version: '3.8'

services:
  web:
    build: .
    container_name: shifthandover_app
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - SECRETS_MASTER_KEY=${SECRETS_MASTER_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - TEAM_EMAIL=${TEAM_EMAIL}
      - SERVICENOW_INSTANCE=${SERVICENOW_INSTANCE}
      - SERVICENOW_USERNAME=${SERVICENOW_USERNAME}
      - SERVICENOW_PASSWORD=${SERVICENOW_PASSWORD}
      - SERVICENOW_ENABLED=${SERVICENOW_ENABLED}
      - SSO_ENCRYPTION_KEY=${SSO_ENCRYPTION_KEY}
      - SECRETS_MASTER_KEY=${SECRETS_MASTER_KEY}
    restart: unless-stopped
    volumes:
      - app_data:/app/instance
    env_file:
      - .env
    expose:
      - "5000"
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - web
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt:rw
      - ./certbot/www:/var/www/certbot:rw
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}

volumes:
  app_data:

networks:
  app-network:
    driver: bridge